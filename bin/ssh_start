#!/bin/bash
# ssh-agent null test/fix
# gratuitous comments warning <<

set -e

# set vars
SOCK="$SSH_AUTH_SOCK"
JSOCK=/tmp/ssh-agent-`hostname`
MSG="SSH_AUTH_SOCK => $SOCK"
MSG_ZPB="Exists / size > ZER0 bytes"
MSG_EXISTS="File exists"
MSG_IS_SOCK="Exists and is a socket"

# fifty equal signs
LEN=$(printf "%50s")
LINE=${LEN// /=}

# usage msg
usage="Usage: $0 [now]"

# print. the. dots.
printdots() {
    N=$1; T=$((43-N)); L=$(printf "%${T}s"); D=${L// /.}
    echo "$D"
}

# cleverly named
runtest() {
    echo -e "\n$MSG"
    echo "$LINE"
    echo "$MSG_EXISTS $(printdots ${#MSG_EXISTS}) $(file_exists)"
    echo "$MSG_ZPB $(printdots ${#MSG_ZPB}) $(file_exists_zero_plus_bytes)"
    echo "$MSG_IS_SOCK $(printdots ${#MSG_IS_SOCK}) $(exists_and_is_socket)"
}

# next three functions are basically redundant, but they
# helped me figure out how this script needed to work,
# so i shall remain loyal and keep them employed
file_exists_zero_plus_bytes() {
    if [ -s "$SOCK" ]; then
        echo 'TRUE'
    else
      echo 'FALSE'
    fi
}
file_exists() {
    if [ -e "$SOCK" ]; then
        echo 'TRUE'
    else
        echo 'FALSE'
    fi
}
exists_and_is_socket() {
    if [ -S "$SOCK" ]; then
        echo 'TRUE'
    else
        echo 'FALSE'
    fi
}

# more clever naming
listkeys() {
    echo "$(/usr/bin/ssh-add -l)"
}
countkeys() {
    echo "$(listkeys |wc -l)"
}
countuserkeys() {
    echo "$(ls -1 ~/.ssh/*.pub |wc -l)"
}
check_agent() {
    local ids=$(ssh-add -l)
    local return=$?
    [[ "$return" == "2" ]] && echo "Agent down, restarting"; start_agent
    [[ "$return" == "1" ]] && echo "$ids"
}
start_agent() {
    eval $(ssh-agent -a ${JSOCK} -s)
}
identities() {
    local k=$(listkeys)
    [[ "$?" == "1" ]] && echo "n" || echo "y"
}
contains() {
    local n=$#
    local value=${!n}
    for ((i=1;i < $#;i++)) {
        if [ "${!i}" == "${value}" ]; then
            echo "y"
            return 0
        fi
    }
    echo "n"
    return 1
}

# on fire with these names
startssh() {
    # infoz
    runtest

    # sort out agent and authsock if necessary
    echo "AUTHSOCK: $SOCK"
    echo "JSOCK: $JSOCK"

    if [[ "$SOCK" != "$JSOCK" ]]; then
        echo "Authsocks do not match"
        test "$SOCK" && ln -sf "$SOCK" "$JSOCK"
    else
        echo "Trying new agent..."
        #eval $(ssh-agent -a ${JSOCK} -s)
        start_agent
    fi
    echo -e "$(listkeys) \n"

    # keycounts
    USER_KEYS=$(ls -1 ~/.ssh/*.pub)
    RUNNING_KEYS=$(ssh-add -l)
    UC=$(countuserkeys)
    KC=$(countkeys)

    echo "$(identities)"

    # make sure agent has all keys
    [[ "$KC" -lt "$UC" ]] && echo "Keycount: ${KC} < ${UC}"
    [[ "$(identities)" == "n" ]] && echo "Ohnoes! Agent has no identities!"
    for KEY in ${USER_KEYS[@]}; do
        if [ $(contains "${RUNNING_KEYS[@]}" "$KEY") == "n" ]; then
            ssh-add "${KEY%.pub}"
        fi
    done
}

# start agent and add keys if requested
# otherwise just print the test info
if [[ "$1" == 'now' ]]; then
    startssh
    listkeys
else
    runtest
    echo -e "$(listkeys) \n"
fi
