#!/usr/bin/env bash
#
#=-----------------------------------------------------------------------------
#
# connect to existing tmux session, or start fresh
# TODO: move functionality provided here into tmux.conf, as this should all be
# possible just with appropriate config settings there, so, like, someone
# should totally do something about that
#
#=-----------------------------------------------------------------------------
#

# functions
#
agent_id_check(){
    ~/bin/ssh-start
    read -p "Do we need to add identities to ssh-agent? " addids
    [[ "$addids" == y* ]] && ~/bin/ssh-start now
}

# first check if we need to add identities to ssh-agent
agent_id_check

# main session
session=0

# if there is a session already, attach to it and exit
tmux has-session -t $session
if [ $? -eq 0 ]; then
    echo "Session $session already exists so let's attach to it..."
    sleep .5
    tmux attach -t $session
    exit 0;
fi

# if there are no existing sessions, let's create a new session, then detach
tmux new-session -d -s $session

#
# TODO: rework this whole setup; it is far too brittle and mixes personal/work
#

# vars to help setup the panes
company='aidentified'
repos=~/git
venvs=~/venvs
github=$repos/github
bitbucket=$repos/bitbucket
repos_company=$github/$company
repo_dotfiles=$github/dotfiles
venv_default=copptop
venvs_enabled=false

# pane titles and where to start them
one_title=infra
one_repo=$repos_company/terraform-aidentified-foundation
one_path=${one_repo:-$github}
#
two_title=aws
two_repo=$repos_company/terraform-aidentified-compliance
two_path=${two_repo:-$github}
#
three_title=ansible
three_repo=$repos_company/aidentified-ops
three_path=${three_repo:-$github}
#
four_title=api
four_repo=$repos_company/coredata-api
four_path=${four_repo:-$github}
#
five_title=aidrc
five_repo=$repos_company/aidentifiedrc
five_path=${five_repo:-$github}
#
six_title=dotfiles
six_repo=$repo_dotfiles
six_path=${six_repo:-$github}
#
seven_title=scratch
seven_repo=""
seven_path=${seven_repo:-~}
#
eight_title=misc
eight_repo=""
eight_path=${eight_repo:-~}
#
nine_title=home
nine_repo=""
nine_path=${nine_repo:-~}

# create directories if necessary
for dir in ${repos} ${github} ${bitbucket} ${venvs}; do
    [ ! -d "${dir}" ] && mkdir -p "${dir}"
done

# open initial windows
tmux neww -t $session:1 -n $one_title
tmux neww -t $session:2 -n $two_title
tmux neww -t $session:3 -n $three_title
tmux neww -t $session:4 -n $four_title
tmux neww -t $session:5 -n $five_title
tmux neww -t $session:6 -n $six_title
tmux neww -t $session:7 -n $seven_title
tmux neww -t $session:8 -n $eight_title
tmux neww -t $session:9 -n $nine_title

# split windows 1-9 into panes
#
for n in {1..9}; do

    tmux splitw -h -t $session:$n  # split all windows horizontally

    # configure each window; always select pane on right side
    #

    # 1: infra
    if [ $n -eq 1 ]; then
        tmux splitw -v -t $session:$n.left
        tmux send -t $session:$n.0 "cd $one_path" C-m
        tmux send -t $session:$n.1 "cd $one_path" C-m
        tmux send -t $session:$n.2 "cd $one_path && git status -sb" C-m
        tmux select-pane -t $session:$n.2

    # 2: aws
    elif [ $n -eq 2 ]; then
        tmux splitw -v -t $session:$n.left
        tmux send -t $session:$n.0 "cd $two_path" C-m
        tmux send -t $session:$n.1 "cd $two_path" C-m
        tmux send -t $session:$n.2 "cd $two_path && git status -sb" C-m
        tmux select-pane -t $session:$n.2


    # 3: ansible
    elif [ $n -eq 3 ]; then
        tmux splitw -v -t $session:$n.left
        tmux send -t $session:$n.0 "cd $three_path" C-m
        tmux send -t $session:$n.1 "cd $three_path" C-m
        tmux send -t $session:$n.2 "cd $three_path && git status -sb" C-m
        tmux select-pane -t $session:$n.2

    # 4: api
    elif [ $n -eq 4 ]; then
        tmux splitw -v -t $session:$n.left
        tmux send -t $session:$n.0 "cd $four_path" C-m
        tmux send -t $session:$n.1 "cd $four_path" C-m
        tmux send -t $session:$n.2 "cd $four_path && git status -sb" C-m
        tmux select-pane -t $session:$n.2

    # 5: aidrc
    elif [ $n -eq 5 ]; then
        tmux splitw -v -t $session:$n.left
        tmux send -t $session:$n.0 "cd $five_path" C-m
        tmux send -t $session:$n.1 "cd $five_path" C-m
        tmux send -t $session:$n.2 "cd $five_path && git status -sb" C-m
        tmux select-pane -t $session:$n.2

    # 6: dotfiles
    elif [ $n -eq 6 ]; then
        tmux splitw -v -t $session:$n.left
        tmux send -t $session:$n.0 "cd $six_path" C-m
        tmux send -t $session:$n.1 "cd $six_path" C-m
        tmux send -t $session:$n.2 "cd $six_path && git status -sb" C-m
        tmux select-pane -t $session:$n.2

    # 7: scratch
    elif [ $n -eq 7 ]; then
        tmux splitw -v -t $session:$n.left
        tmux send -t $session:$n.0 "cd $seven_path" C-m
        tmux send -t $session:$n.1 "cd $seven_path" C-m
        tmux send -t $session:$n.2 "cd $seven_path && date" C-m
        tmux select-pane -t $session:$n.2

    # 8: misc
    elif [ $n -eq 8 ]; then
        tmux send -t $session:$n.left "cd $eight_path" C-m
        tmux send -t $session:$n.right "cd $eight_path && date" C-m
        tmux select-pane -t $session:$n.1

    # 9: home
    elif [ $n -eq 9 ]; then
        tmux send -t $session:$n.left "cd $nine_path" C-m
        tmux send -t $session:$n.right "cd $nine_path && date" C-m
        tmux select-pane -t $session:$n.1

    # n: default
    else
        tmux splitw -v -t $session:$n.left
    fi

done

# tell venvs to workon default venv
if [ "$venvs_enabled" = "true" ]; then
    for i in {0..2}; do
        tmux send -t $session:4.$i "workon $venv_default" C-m
    done
fi

# start admin session on win 0
tmux send -t $session:0 "sudo su -" C-m

# set default selected win
tmux select-window -t $session:0

# attached to new session
tmux attach -t $session
